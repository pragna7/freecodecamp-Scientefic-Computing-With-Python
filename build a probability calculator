import random

class Hat:
    def __init__(self, balls):
        self.contents = []
        for color, count in balls.items():
            self.contents.extend([color] * count)

    def draw(self, num_balls):
        # If num_balls is greater than the number of balls in the hat, return all balls
        if num_balls >= len(self.contents):
            drawn_balls = self.contents[:]
            self.contents = []
            return drawn_balls
        # Otherwise, draw the specified number of balls
        drawn_balls = random.sample(self.contents, num_balls)
        for ball in drawn_balls:
            self.contents.remove(ball)
        return drawn_balls

def experiment(hat, expected_balls, num_balls_drawn, num_experiments):
    success_count = 0

    for _ in range(num_experiments):
        # Create a copy of the hat's contents for each experiment
        hat_copy = Hat({ball: hat.contents.count(ball) for ball in set(hat.contents)})
        drawn_balls = hat_copy.draw(num_balls_drawn)
        drawn_balls_count = {ball: drawn_balls.count(ball) for ball in set(drawn_balls)}

        # Check if the drawn balls contain at least the expected number of each ball
        success = True
        for ball, count in expected_balls.items():
            if drawn_balls_count.get(ball, 0) < count:
                success = False
                break

        if success:
            success_count += 1

    return success_count / num_experiments
